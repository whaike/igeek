// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	chapterInfoFieldNames          = builder.RawFieldNames(&ChapterInfo{})
	chapterInfoRows                = strings.Join(chapterInfoFieldNames, ",")
	chapterInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(chapterInfoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	chapterInfoRowsWithPlaceHolder = strings.Join(stringx.Remove(chapterInfoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	chapterInfoModel interface {
		Insert(ctx context.Context, data *ChapterInfo) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ChapterInfo, error)
		Update(ctx context.Context, data *ChapterInfo) error
		Delete(ctx context.Context, id int64) error
	}

	defaultChapterInfoModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ChapterInfo struct {
		Id       int64  `db:"id"`        // 主键ID
		CourseId int64  `db:"course_id"` // 课程id
		Title    string `db:"title"`     // 章节标题
		AudioId  int64  `db:"audio_id"`  // 音频id
		Content  string `db:"content"`   // 文章内容
		CreateAt string `db:"create_at"` // 创建时间
		UpdateAt string `db:"update_at"` // 创建时间
	}
)

func newChapterInfoModel(conn sqlx.SqlConn) *defaultChapterInfoModel {
	return &defaultChapterInfoModel{
		conn:  conn,
		table: "`chapter_info`",
	}
}

func (m *defaultChapterInfoModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultChapterInfoModel) FindOne(ctx context.Context, id int64) (*ChapterInfo, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", chapterInfoRows, m.table)
	var resp ChapterInfo
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultChapterInfoModel) Insert(ctx context.Context, data *ChapterInfo) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, chapterInfoRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.CourseId, data.Title, data.AudioId, data.Content)
	return ret, err
}

func (m *defaultChapterInfoModel) Update(ctx context.Context, data *ChapterInfo) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, chapterInfoRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.CourseId, data.Title, data.AudioId, data.Content, data.Id)
	return err
}

func (m *defaultChapterInfoModel) tableName() string {
	return m.table
}
