// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	audioInfoFieldNames          = builder.RawFieldNames(&AudioInfo{})
	audioInfoRows                = strings.Join(audioInfoFieldNames, ",")
	audioInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(audioInfoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	audioInfoRowsWithPlaceHolder = strings.Join(stringx.Remove(audioInfoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	audioInfoModel interface {
		Insert(ctx context.Context, data *AudioInfo) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AudioInfo, error)
		Update(ctx context.Context, data *AudioInfo) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAudioInfoModel struct {
		conn  sqlx.SqlConn
		table string
	}

	AudioInfo struct {
		Id       int64  `db:"id"`        // 语音文件的唯一id
		Link     string `db:"link"`      // 文件存储地址
		Size     int64  `db:"size"`      // 文件大小(字节)
		Duration int64  `db:"duration"`  // 文件时长(秒)
		CreateAt string `db:"create_at"` // 创建时间
		UpdateAt string `db:"update_at"` // 创建时间
	}
)

func newAudioInfoModel(conn sqlx.SqlConn) *defaultAudioInfoModel {
	return &defaultAudioInfoModel{
		conn:  conn,
		table: "`audio_info`",
	}
}

func (m *defaultAudioInfoModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultAudioInfoModel) FindOne(ctx context.Context, id int64) (*AudioInfo, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", audioInfoRows, m.table)
	var resp AudioInfo
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAudioInfoModel) Insert(ctx context.Context, data *AudioInfo) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, audioInfoRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Link, data.Size, data.Duration)
	return ret, err
}

func (m *defaultAudioInfoModel) Update(ctx context.Context, data *AudioInfo) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, audioInfoRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Link, data.Size, data.Duration, data.Id)
	return err
}

func (m *defaultAudioInfoModel) tableName() string {
	return m.table
}
