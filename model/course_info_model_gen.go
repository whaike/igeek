// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	courseInfoFieldNames          = builder.RawFieldNames(&CourseInfo{})
	courseInfoRows                = strings.Join(courseInfoFieldNames, ",")
	courseInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(courseInfoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	courseInfoRowsWithPlaceHolder = strings.Join(stringx.Remove(courseInfoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	courseInfoModel interface {
		Insert(ctx context.Context, data *CourseInfo) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*CourseInfo, error)
		FindOneByTitle(ctx context.Context, title string) (*CourseInfo, error)
		Update(ctx context.Context, data *CourseInfo) error
		Delete(ctx context.Context, id int64) error
	}

	defaultCourseInfoModel struct {
		conn  sqlx.SqlConn
		table string
	}

	CourseInfo struct {
		Id       int64  `db:"id"`        // 主键ID
		Title    string `db:"title"`     // 标题
		Author   string `db:"author"`    // 作者
		Source   string `db:"source"`    // 来源
		CreateAt string `db:"create_at"` // 创建时间
		UpdateAt string `db:"update_at"` // 创建时间
	}
)

func newCourseInfoModel(conn sqlx.SqlConn) *defaultCourseInfoModel {
	return &defaultCourseInfoModel{
		conn:  conn,
		table: "`course_info`",
	}
}

func (m *defaultCourseInfoModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultCourseInfoModel) FindOne(ctx context.Context, id int64) (*CourseInfo, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", courseInfoRows, m.table)
	var resp CourseInfo
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCourseInfoModel) FindOneByTitle(ctx context.Context, title string) (*CourseInfo, error) {
	var resp CourseInfo
	query := fmt.Sprintf("select %s from %s where `title` = ? limit 1", courseInfoRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, title)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCourseInfoModel) Insert(ctx context.Context, data *CourseInfo) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, courseInfoRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Title, data.Author, data.Source)
	return ret, err
}

func (m *defaultCourseInfoModel) Update(ctx context.Context, newData *CourseInfo) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, courseInfoRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Title, newData.Author, newData.Source, newData.Id)
	return err
}

func (m *defaultCourseInfoModel) tableName() string {
	return m.table
}
